#Data:
a1 <- read.table("http://real-chart.finance.yahoo.com/table.csv?s=AAPL&a=00&b=01&c=2010&d=03&e=1&f=2015&g=m&ignore=.csv", sep=',', header=TRUE)

a2 <- read.table("http://real-chart.finance.yahoo.com/table.csv?s=IBM&a=00&b=01&c=2010&d=03&e=1&f=2015&g=m&ignore=.csv", sep=',', header=TRUE)

a3 <- read.table("http://real-chart.finance.yahoo.com/table.csv?s=XOM&a=00&b=01&c=2010&d=03&e=1&f=2015&g=m&ignore=.csv", sep=',', header=TRUE)

#Convert the adjusted close prices into returns:
r1 <- (a1$Adj.Close[-64] - a1$Adj.Close[-1]) / (a1$Adj.Close[-1])
r2 <- (a2$Adj.Close[-64] - a2$Adj.Close[-1]) / (a2$Adj.Close[-1])
r3 <- (a3$Adj.Close[-64] - a3$Adj.Close[-1]) / (a3$Adj.Close[-1])

#Create a data frame  using the returns:
rr <- data.frame(r1, r2, r3)

#Compute the means:
means <- colMeans(rr)

#Find the covariance matrix:
cov.matrix <- cov(rr)


  inv <- solve(cov.matrix)  temp <- 0  for(i in 1:length(means)){    for(j in 1:length(means)){    temp <- temp + inv[i, j] * means[j]    }}  A <- temp  temp <- 0  for(i in 1:length(means)){    for(j in 1:length(means)){      temp <- temp + inv[i, j] * means[i] * means[j]    }}B <- temptemp <- 0
for(i in 1:length(means)){  for(j in 1:length(means)){    temp <- temp + inv[i, j]	} 
}C <- temp

temp <- 0D <- B*C - A^2  plot(0, A/C, main = "Portfolio possibilities curve", xlab = "Risk (standard deviation)",  ylab = "Expected Return", type = "n",  xlim = c(-2*sqrt(1/C), 4*sqrt(1/C)), 
  ylim = c(-2*A/C, 4*A/C))
  
#Plot center of the hyperbola:
    points(0, A/C, pch = 19)

#Plot transverse and conjugate axes:
    abline(v = 0) #Also this is the y-axis.    abline(h = A/C)

#Plot the x-axis:
    abline(h = 0)
    
#Plot the minimum risk portfolio:
    points(sqrt(1/C), A/C, pch=19)
    
#Find the asymptotes:
    V <- seq(-1, 1, 0.001)    A1 <- A/C + V * sqrt(D/C)    A2 <- A/C - V * sqrt(D/C)    points(V, A1, type = "l")    points(V, A2, type = "l")

#Efficient frontier:
    minvar <- 1/C    minE <- A/C    sdeff <- seq((minvar)^0.5, 1, by = 0.0001)    options(warn = -1)    y1 <- (A + sqrt(D*(C*sdeff^2 - 1)))*(1/C)     y2 <- (A - sqrt(D*(C*sdeff^2 - 1)))*(1/C)     options(warn = 0)

    points(sdeff, y1, type = "l")    points(sdeff, y2, type = "l")